1 First Duplicate in a List (first_duplicate)

Find and return the first duplicate in an integer list.

You can see the problem formulation at:
https://www.youtube.com/watch?v=XSdr_O-XVRQ

Prototype: first_duplicate of a list returns -10000 if there are no duplicates in the integer list argument.
Otherwise the first item that occurs more than once (duplicate) in the integer list is returned.

Signature:
  val first_duplicate : int list -> int = <fun>

  Sample Use:
  # first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
  : int = 4
  # first_duplicate [1;2;3;4;5;6;7;4;5;2;9];;
  : int = 2
  # first_duplicate [1;2;3;4;5;6;7;8;9;10];;
  : int = -10000

2 First Non-Repeating Element in a List (first_nonrepeating)

Find the first item that is not in the integer list more than once.

You can see the problem formulation at:
https://youtube/5co5Gvp_-S0

Prototype: first_nonrepeating of a list returns -10000 if there are no non-repeated (non-duplicated) element in the list.
Otherwise it returns the first non-repeating element in the integer list.

Signature:
  val first_nonrepeating : int list -> int = <fun>

  Sample Use:
  # first_nonrepeating [1;2;3;2;7;5;6;1;3];;
  : int = 7
  # first_nonrepeating [1;2;9;3;2;7;5;6;1;3];;
  : int = 9
  # first_nonrepeating [1;2;9;3;2;7;5;6;10;30];;
  : int = 1
  # first_nonrepeating [1;2;9;3;2;7;5;6;1;10;30];;
  : int = 9
  # first_nonrepeating [1;2;9;3;2;7;5;9;6;1;10;30];; : int = 3
  # first_nonrepeating [1;2;3;2;7;5;6;1;3];;
  : int = 7
  # first_nonrepeating [1;2;3;4;5;1;2;3;4;5];;
  : int = -10000
  # first_nonrepeating [1;2;3;4;5;1;2;3;4;9];;
  : int = 5
  # first_nonrepeating [1;1;1;2;2;2];;
  : int = -10000

3 The Sum of 2 Problem (sumOfTwo)

Look for a pair on elements from two integer lists that sum to a given value.

You can see the problem formulation at:
https://www.youtube.com/watch?v=BoHO04xVeU0 https://www.youtube.com/watch?v=sfuZzBLPcx4

Two arrays contain numbers able to produce a given sum. A sample case from the video:
If a=[1;2;3], b=[10;20,30,40] and v=42, then sumOfTwo(a,b,v)=true
because (2+40)=42=v.
If a=[1;2;3], b=[10;20,30,40] and v=45, then sumOfTwo(a,b,v)=false
because none of 11,21,31,41,12,22,32,42,13,23,33,43 is equal to 45 (v).

Prototype: sumOfTwo(a,b,v) returns false if there does not exdist and integer in a, which added to any integer in b, equals v.
If there is an integer in a, and an integer in b that sum to v, return true.

Signature:
  val sumOfTwo : int list * int list * int -> bool = <fun>

  Sample Use:
  # sumOfTwo([1;2;3],[10;20;30;40],42);;
  : bool = true
  # sumOfTwo([1;2;3],[10;20;30;40],40);;
  : bool = false
  # sumOfTwo([1;2;3],[10;20;30;40],41);;
  : bool = true
  # sumOfTwo([1;2;3],[10;20;30;40],43);;
  : bool = true
  # sumOfTwo([1;2;3],[10;20;30;40],44);;
  : bool = false
  # sumOfTwo([1;2;3],[10;20;30;40],11);;
  : bool = true
  # sumOfTwo([1;2;3],[10;20;30;40],15);;
  : bool = false

4 CYK Parsing Algorithm-Inspired Problem (cyk_sublists)

Please note we are NOT trying to implement the CYK algorithm in ocaml.
However, in forming the CYK parse table (Book, Chapter 4, Section 4.4.6) it is necessary to consider
how many ways a string (here a list) of length n may be comprised by concatenation of two non-empty sublists.
Given n, cyk_sublists returns a list of tuples. Each tuple is the length of the 2 component strings and the two tuple elements sum to n.

Prototpe: cyk_sublists n returns all of the positive integer pairs x and y that add up to n.
Pairs are returned as tuples. Argument n must be larger than 1, otherwise return []

Signature:
  val cyk_sublists : int -> (int * int) list = <fun>

  Sample Use:
  # cyk_sublists 4;;
  : (int * int) list = [(1, 3); (2, 2); (3, 1)]
  # cyk_sublists 3;;
  : (int * int) list = [(1, 2); (2, 1)]
  # cyk_sublists 5;;
  : (int * int) list = [(1, 4); (2, 3); (3, 2); (4, 1)]
